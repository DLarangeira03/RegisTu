/*
 * A. Benquerer
 * e-mail: dev.benquerer@gmail.com
 * GitHub: https://github.com/Benquerer
 * 
 * Aluno 24633 @ IPT, Oct 2024.
 * 
 * The code in this file was developed for learning and experimentation purposes.
 * 
 */
package p2p;

import blockchain.Block;
import blockchain.BlockChain;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import resources.circLoadingBar;
import utils.Curriculum;
import utils.RMI;

/**
 * This Frame represents a node in the P2P Network.
 *
 * @author A. Benquerer @ IPT
 * @author D. Larangeira @ IPT
 */
public class NodeFrame extends javax.swing.JFrame implements P2Plistener {

    OremoteP2P remoteObject;
    DefaultListModel userList = new DefaultListModel();
    DefaultListModel transactions = new DefaultListModel();
    DefaultListModel blockchain = new DefaultListModel();

    /**
     * Creates new NodeFrame
     */
    public NodeFrame() {
        //netbeans init code
        initComponents();
        //setup nodes address text box
        try {
            txtAddress.setText(InetAddress.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            txtAddress.setText("127.0.0.1");
        }

        //code to run after init
        myInit();
    }

    /**
     * Custom code that will run right after the initialization of components
     */
    public void myInit() {

        //any custom code for the frame should be here. 
        //certer aux frame 
        AboutFrame.setLocationRelativeTo(null);
        //hide progbar
        pgrbarPeer.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AboutFrame = new javax.swing.JFrame();
        jPanel36 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel40 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlNode = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnStartNode = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtAddress = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtObjName = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInternalLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        pnlNetwork = new javax.swing.JSplitPane();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        btnConnectToPeer = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        txtPeerAddress = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        pgrbarPeer = new javax.swing.JProgressBar();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtKnownNet = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        pnlTransactions = new javax.swing.JSplitPane();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jlstTransactions = new javax.swing.JList<>();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        lblRegistrantName = new javax.swing.JLabel();
        txtRegistrantName = new javax.swing.JTextField();
        lblOwnerName = new javax.swing.JLabel();
        txtOwnerName = new javax.swing.JTextField();
        lblDesc = new javax.swing.JLabel();
        txtDesc = new javax.swing.JTextField();
        lblRegistrantPub = new javax.swing.JLabel();
        txtRegistrantPub = new javax.swing.JTextField();
        lblOwnerPub = new javax.swing.JLabel();
        txtOwnerPub = new javax.swing.JTextField();
        lblSigned = new javax.swing.JLabel();
        txtSigned = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        pnlUsers1 = new javax.swing.JSplitPane();
        jPanel38 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jlstLedger = new javax.swing.JList<>();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel20 = new javax.swing.JPanel();
        lblCurrHash = new javax.swing.JLabel();
        txtCurrHash = new javax.swing.JTextField();
        lblMktRoot = new javax.swing.JLabel();
        txtMktRoot = new javax.swing.JTextField();
        lblPrevHash = new javax.swing.JLabel();
        txtPrevHash = new javax.swing.JTextField();
        lblNonce = new javax.swing.JLabel();
        txtNonce = new javax.swing.JTextField();
        jPanel48 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlistBlockTransactions = new javax.swing.JList<>();
        jPanel44 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        pnlUsers = new javax.swing.JSplitPane();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlstUsers = new javax.swing.JList<>();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblIsOrg = new javax.swing.JLabel();
        txtIsOrg = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        mbarX = new javax.swing.JMenuBar();
        mMain = new javax.swing.JMenu();
        sp1 = new javax.swing.JPopupMenu.Separator();
        miAbout = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        chkboxColorMode = new javax.swing.JCheckBoxMenuItem();
        miAccColor = new javax.swing.JMenuItem();

        AboutFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        AboutFrame.setMinimumSize(new java.awt.Dimension(700, 550));
        AboutFrame.setResizable(false);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 20));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel10.setText("About The Project");
        jPanel36.add(jLabel10);

        AboutFrame.getContentPane().add(jPanel36, java.awt.BorderLayout.PAGE_START);

        jPanel29.setLayout(new java.awt.GridLayout(0, 1, 0, 50));

        jButton6.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jButton6.setText("The Project");
        jButton6.setMaximumSize(new java.awt.Dimension(220, 75));
        jButton6.setMinimumSize(new java.awt.Dimension(220, 75));
        jButton6.setPreferredSize(new java.awt.Dimension(220, 75));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel39.add(jButton6);

        jPanel29.add(jPanel39);

        jButton5.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jButton5.setText("Benquerer");
        jButton5.setMaximumSize(new java.awt.Dimension(220, 75));
        jButton5.setMinimumSize(new java.awt.Dimension(220, 75));
        jButton5.setPreferredSize(new java.awt.Dimension(220, 75));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel40.add(jButton5);

        jPanel29.add(jPanel40);

        jButton7.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jButton7.setText("Larangeira");
        jButton7.setMaximumSize(new java.awt.Dimension(220, 75));
        jButton7.setMinimumSize(new java.awt.Dimension(220, 75));
        jButton7.setPreferredSize(new java.awt.Dimension(220, 75));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel41.add(jButton7);

        jPanel29.add(jPanel41);

        AboutFrame.getContentPane().add(jPanel29, java.awt.BorderLayout.CENTER);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel30.add(jButton1);

        AboutFrame.getContentPane().add(jPanel30, java.awt.BorderLayout.PAGE_END);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(utils.app_params.APP_NAME);
        setMinimumSize(new java.awt.Dimension(950, 550));
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        pnlNode.setDividerLocation(200);
        pnlNode.setDividerSize(3);
        pnlNode.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setLayout(new java.awt.BorderLayout());

        btnStartNode.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        btnStartNode.setText("Start Node");
        btnStartNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartNodeActionPerformed(evt);
            }
        });
        jPanel3.add(btnStartNode, java.awt.BorderLayout.CENTER);

        jPanel6.setPreferredSize(new java.awt.Dimension(316, 50));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel7.setPreferredSize(new java.awt.Dimension(316, 50));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jPanel8.setPreferredSize(new java.awt.Dimension(50, 150));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel8, java.awt.BorderLayout.LINE_END);

        jPanel9.setPreferredSize(new java.awt.Dimension(50, 150));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel9, java.awt.BorderLayout.LINE_START);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(0, 1));

        txtAddress.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Node's Address:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel4.add(txtAddress);
        txtAddress.getAccessibleContext().setAccessibleName("");

        txtPort.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPort.setText("10001");
        txtPort.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Node's Port:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel4.add(txtPort);

        txtObjName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtObjName.setText("node1");
        txtObjName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Node's Name:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel4.add(txtObjName);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel5);

        pnlNode.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        txtInternalLog.setEditable(false);
        txtInternalLog.setColumns(20);
        txtInternalLog.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtInternalLog.setRows(5);
        jScrollPane1.setViewportView(txtInternalLog);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Node's Log:");
        jPanel2.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        pnlNode.setRightComponent(jPanel2);

        jTabbedPane1.addTab("Node", pnlNode);

        pnlNetwork.setDividerLocation(150);
        pnlNetwork.setDividerSize(0);
        pnlNetwork.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jPanel11.setLayout(new java.awt.BorderLayout());

        btnConnectToPeer.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnConnectToPeer.setText("Connect to Peer");
        btnConnectToPeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectToPeerActionPerformed(evt);
            }
        });
        jPanel11.add(btnConnectToPeer, java.awt.BorderLayout.CENTER);

        jPanel12.setPreferredSize(new java.awt.Dimension(316, 50));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel12, java.awt.BorderLayout.PAGE_START);

        jPanel13.setPreferredSize(new java.awt.Dimension(316, 50));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel13, java.awt.BorderLayout.PAGE_END);

        jPanel14.setPreferredSize(new java.awt.Dimension(50, 150));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel14, java.awt.BorderLayout.LINE_END);

        jPanel15.setPreferredSize(new java.awt.Dimension(50, 150));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel15, java.awt.BorderLayout.LINE_START);

        jPanel10.add(jPanel11);

        jPanel16.setLayout(new java.awt.GridLayout(0, 1));

        txtPeerAddress.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPeerAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Peer Address:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel16.add(txtPeerAddress);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 75, Short.MAX_VALUE)
        );

        jPanel16.add(jPanel19);

        jPanel10.add(jPanel16);

        pgrbarPeer.setEnabled(false);
        pgrbarPeer.setFocusable(false);
        pgrbarPeer.setIndeterminate(true);
        pgrbarPeer.setMaximumSize(new java.awt.Dimension(150, 25));
        pgrbarPeer.setMinimumSize(new java.awt.Dimension(150, 25));
        pgrbarPeer.setPreferredSize(new java.awt.Dimension(150, 25));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel17Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pgrbarPeer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel17Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pgrbarPeer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel10.add(jPanel17);

        pnlNetwork.setLeftComponent(jPanel10);

        jPanel18.setLayout(new java.awt.BorderLayout());

        txtKnownNet.setEditable(false);
        txtKnownNet.setColumns(20);
        txtKnownNet.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtKnownNet.setRows(5);
        jScrollPane2.setViewportView(txtKnownNet);

        jPanel18.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Known Network:");
        jPanel18.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        pnlNetwork.setRightComponent(jPanel18);

        jTabbedPane1.addTab("P2P Network", pnlNetwork);

        pnlTransactions.setDividerLocation(350);
        pnlTransactions.setDividerSize(0);

        jPanel28.setLayout(new java.awt.BorderLayout());

        jlstTransactions.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jlstTransactions.setModel(transactions);
        jlstTransactions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstTransactionsValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(jlstTransactions);

        jPanel28.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        pnlTransactions.setLeftComponent(jPanel28);

        jPanel31.setLayout(new java.awt.BorderLayout());

        jPanel32.setLayout(new java.awt.GridLayout(6, 2));

        lblRegistrantName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblRegistrantName.setText("Registrant Organization:");
        jPanel32.add(lblRegistrantName);

        txtRegistrantName.setEditable(false);
        txtRegistrantName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtRegistrantName);

        lblOwnerName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOwnerName.setText("Owner's Name:");
        jPanel32.add(lblOwnerName);

        txtOwnerName.setEditable(false);
        txtOwnerName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtOwnerName);

        lblDesc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDesc.setText("Curriculum Description:");
        jPanel32.add(lblDesc);

        txtDesc.setEditable(false);
        txtDesc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtDesc);

        lblRegistrantPub.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblRegistrantPub.setText("Registrant's Public Key");
        jPanel32.add(lblRegistrantPub);

        txtRegistrantPub.setEditable(false);
        txtRegistrantPub.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtRegistrantPub);

        lblOwnerPub.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOwnerPub.setText("Owner's Public Key");
        jPanel32.add(lblOwnerPub);

        txtOwnerPub.setEditable(false);
        txtOwnerPub.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtOwnerPub);

        lblSigned.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSigned.setText("Signature validation:");
        jPanel32.add(lblSigned);

        txtSigned.setEditable(false);
        txtSigned.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel32.add(txtSigned);

        jPanel31.add(jPanel32, java.awt.BorderLayout.CENTER);

        jPanel33.setMaximumSize(new java.awt.Dimension(600, 50));
        jPanel33.setMinimumSize(new java.awt.Dimension(600, 50));
        jPanel33.setPreferredSize(new java.awt.Dimension(600, 50));

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel31.add(jPanel33, java.awt.BorderLayout.PAGE_START);

        jPanel34.setMaximumSize(new java.awt.Dimension(600, 50));
        jPanel34.setMinimumSize(new java.awt.Dimension(600, 50));
        jPanel34.setPreferredSize(new java.awt.Dimension(600, 50));

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel31.add(jPanel34, java.awt.BorderLayout.PAGE_END);

        jPanel35.setMaximumSize(new java.awt.Dimension(50, 278));
        jPanel35.setMinimumSize(new java.awt.Dimension(50, 278));
        jPanel35.setPreferredSize(new java.awt.Dimension(50, 378));

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jPanel31.add(jPanel35, java.awt.BorderLayout.LINE_END);

        jPanel37.setMaximumSize(new java.awt.Dimension(50, 278));
        jPanel37.setMinimumSize(new java.awt.Dimension(50, 278));
        jPanel37.setPreferredSize(new java.awt.Dimension(50, 378));

        javax.swing.GroupLayout jPanel37Layout = new javax.swing.GroupLayout(jPanel37);
        jPanel37.setLayout(jPanel37Layout);
        jPanel37Layout.setHorizontalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel37Layout.setVerticalGroup(
            jPanel37Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jPanel31.add(jPanel37, java.awt.BorderLayout.LINE_START);

        pnlTransactions.setRightComponent(jPanel31);

        jTabbedPane1.addTab("Transactions", pnlTransactions);

        pnlUsers1.setDividerLocation(350);
        pnlUsers1.setDividerSize(0);

        jPanel38.setLayout(new java.awt.BorderLayout());

        jlstLedger.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jlstLedger.setModel(blockchain);
        jlstLedger.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstLedgerValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(jlstLedger);

        jPanel38.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        pnlUsers1.setLeftComponent(jPanel38);

        jPanel42.setLayout(new java.awt.BorderLayout());

        jPanel43.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(175);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Block Header"));
        jPanel20.setLayout(new java.awt.GridLayout(4, 2));

        lblCurrHash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCurrHash.setText("Current Hash:");
        jPanel20.add(lblCurrHash);

        txtCurrHash.setEditable(false);
        txtCurrHash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel20.add(txtCurrHash);

        lblMktRoot.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMktRoot.setText("Merkle Root:");
        jPanel20.add(lblMktRoot);

        txtMktRoot.setEditable(false);
        txtMktRoot.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel20.add(txtMktRoot);

        lblPrevHash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPrevHash.setText("Previous Hash:");
        jPanel20.add(lblPrevHash);

        txtPrevHash.setEditable(false);
        txtPrevHash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel20.add(txtPrevHash);

        lblNonce.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblNonce.setText("Nonce:");
        jPanel20.add(lblNonce);

        txtNonce.setEditable(false);
        txtNonce.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel20.add(txtNonce);

        jSplitPane1.setLeftComponent(jPanel20);

        jPanel48.setBorder(javax.swing.BorderFactory.createTitledBorder("Transactions:"));
        jPanel48.setLayout(new java.awt.BorderLayout());

        jScrollPane4.setViewportView(jlistBlockTransactions);

        jPanel48.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel48);

        jPanel43.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel42.add(jPanel43, java.awt.BorderLayout.CENTER);

        jPanel44.setMaximumSize(new java.awt.Dimension(600, 25));
        jPanel44.setMinimumSize(new java.awt.Dimension(600, 25));
        jPanel44.setPreferredSize(new java.awt.Dimension(600, 25));

        javax.swing.GroupLayout jPanel44Layout = new javax.swing.GroupLayout(jPanel44);
        jPanel44.setLayout(jPanel44Layout);
        jPanel44Layout.setHorizontalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel44Layout.setVerticalGroup(
            jPanel44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        jPanel42.add(jPanel44, java.awt.BorderLayout.PAGE_START);

        jPanel45.setMaximumSize(new java.awt.Dimension(600, 25));
        jPanel45.setMinimumSize(new java.awt.Dimension(600, 25));
        jPanel45.setPreferredSize(new java.awt.Dimension(600, 25));

        javax.swing.GroupLayout jPanel45Layout = new javax.swing.GroupLayout(jPanel45);
        jPanel45.setLayout(jPanel45Layout);
        jPanel45Layout.setHorizontalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel45Layout.setVerticalGroup(
            jPanel45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        jPanel42.add(jPanel45, java.awt.BorderLayout.PAGE_END);

        jPanel46.setMaximumSize(new java.awt.Dimension(25, 278));
        jPanel46.setMinimumSize(new java.awt.Dimension(25, 278));
        jPanel46.setPreferredSize(new java.awt.Dimension(25, 378));

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        jPanel42.add(jPanel46, java.awt.BorderLayout.LINE_END);

        jPanel47.setMaximumSize(new java.awt.Dimension(25, 278));
        jPanel47.setMinimumSize(new java.awt.Dimension(25, 278));
        jPanel47.setPreferredSize(new java.awt.Dimension(25, 378));

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        jPanel42.add(jPanel47, java.awt.BorderLayout.LINE_START);

        pnlUsers1.setRightComponent(jPanel42);

        jTabbedPane1.addTab("Blockchain", pnlUsers1);

        pnlUsers.setDividerLocation(350);
        pnlUsers.setDividerSize(0);

        jPanel21.setLayout(new java.awt.BorderLayout());

        jlstUsers.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jlstUsers.setModel(userList);
        jlstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstUsersValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jlstUsers);

        jPanel21.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        pnlUsers.setLeftComponent(jPanel21);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("User's Details"));
        jPanel23.setLayout(new java.awt.GridLayout(2, 2, 10, 80));

        lblUsername.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblUsername.setText("Username:");
        jPanel23.add(lblUsername);

        txtUsername.setEditable(false);
        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel23.add(txtUsername);

        lblIsOrg.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblIsOrg.setText("Registrant Status:");
        jPanel23.add(lblIsOrg);

        txtIsOrg.setEditable(false);
        txtIsOrg.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPanel23.add(txtIsOrg);

        jPanel22.add(jPanel23, java.awt.BorderLayout.CENTER);

        jPanel24.setMaximumSize(new java.awt.Dimension(600, 100));
        jPanel24.setMinimumSize(new java.awt.Dimension(600, 100));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel22.add(jPanel24, java.awt.BorderLayout.PAGE_START);

        jPanel25.setMaximumSize(new java.awt.Dimension(600, 100));
        jPanel25.setMinimumSize(new java.awt.Dimension(600, 100));

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel22.add(jPanel25, java.awt.BorderLayout.PAGE_END);

        jPanel26.setMaximumSize(new java.awt.Dimension(100, 278));
        jPanel26.setMinimumSize(new java.awt.Dimension(100, 278));

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        jPanel22.add(jPanel26, java.awt.BorderLayout.LINE_END);

        jPanel27.setMaximumSize(new java.awt.Dimension(100, 278));
        jPanel27.setMinimumSize(new java.awt.Dimension(100, 278));

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        jPanel22.add(jPanel27, java.awt.BorderLayout.LINE_START);

        pnlUsers.setRightComponent(jPanel22);

        jTabbedPane1.addTab("Users", pnlUsers);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        mbarX.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        mMain.setText("Menu");
        mMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mMain.add(sp1);

        miAbout.setText("About The App");
        miAbout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        mMain.add(miAbout);
        mMain.add(jSeparator1);

        chkboxColorMode.setSelected(true);
        chkboxColorMode.setText("Dark Mode");
        chkboxColorMode.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkboxColorMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkboxColorModeActionPerformed(evt);
            }
        });
        mMain.add(chkboxColorMode);

        miAccColor.setText("Accent Color");
        miAccColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAccColorActionPerformed(evt);
            }
        });
        mMain.add(miAccColor);

        mbarX.add(mMain);

        setJMenuBar(mbarX);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This handles the dark/light mode switch function.
     *
     * @param evt color mode menu change
     */
    private void chkboxColorModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkboxColorModeActionPerformed
        //check if the darkmode is selected
        boolean isDarkMode = chkboxColorMode.getState();
        //is selected, set to darkmode
        if (isDarkMode) {
            try {
                //set LaF MacOS Dark
                UIManager.setLookAndFeel(new FlatMacDarkLaf());
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            //if not, change to lightmode
            try {
                //set LaF MacOS Dark
                UIManager.setLookAndFeel(new FlatMacLightLaf());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        //update LaF
        SwingUtilities.updateComponentTreeUI(this);
        SwingUtilities.updateComponentTreeUI(AboutFrame);

    }//GEN-LAST:event_chkboxColorModeActionPerformed

    /**
     * This handles the display of the about frame.
     *
     * @param evt about menu item clicked
     */
    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        AboutFrame.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    /**
     * This implements the back button on the about frame.
     *
     * @param evt back button clicked.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AboutFrame.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Handle displaying information about the project
     *
     * @param evt about project button clicked
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JOptionPane.showMessageDialog(rootPane, """
                                                This project is a Java-based application designed for securely registering curricular events on a blockchain. 
                                                Said blockchain utilizes the POW decentralized consensus mechanism, and system leverages Merkle trees for 
                                                efficient data verification and consistency. To enhance user experience, the application incorporates a 
                                                user-friendly interface, allowing seamless and responsive interaction with the system.
                                                This project was developed by André Benquerer and Diogo Larangeira, and was proposed as the main project of
                                                the "Computação Distribuida" class of 2024.
                                                """,
                "About the project", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * Handles displaying the dev's information.
     *
     * @param evt button clicked
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JOptionPane.showMessageDialog(rootPane, """
                                                André Benquerer
                                                Student #24633 @ Instituto Politécnico de Tomar
                                                Computer Engineering - 3rd Year
                                                Contact: dev.benquerer@gmail.com
                                                Github: Benquerer
                                                """,
                "About the project", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/resources/fotDev1.jpg")));

    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * Handles displaying the dev's information.
     *
     * @param evt button clicked
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JOptionPane.showMessageDialog(rootPane, """
                                                Diogo Larangeira 
                                                Student #24993 @ Instituto Politécnico de Tomar
                                                Computer Engineering - 3rd Year
                                                Contact: aluno24993@ipt.pt
                                                """,
                "About Diogo", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/resources/fotDev2.jpg")));
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * This handles the selection of a new accent color for the application
     *
     * @param evt menu item for accent color clicked
     */
    private void miAccColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAccColorActionPerformed
        try {
            //diplay color chooser to user
            Color accColor = JColorChooser.showDialog(null, "Pick a Color", Color.RED);
            //if a color was selected, use it
            if (accColor != null) {
                //convert the selected color to a hex string
                String hexColor = String.format("#%02x%02x%02x", accColor.getRed(), accColor.getGreen(), accColor.getBlue());;
                //set laf to use color as accent
                FlatLaf laf = new FlatMacDarkLaf();
                laf.setExtraDefaults(Collections.singletonMap("@accentColor", hexColor));
                //set laf on uimanager
                UIManager.setLookAndFeel(laf);
                //update LaF
                SwingUtilities.updateComponentTreeUI(this);
                SwingUtilities.updateComponentTreeUI(AboutFrame);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_miAccColorActionPerformed

    private void btnStartNodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartNodeActionPerformed

        try {
            //get info for node's internal server
            int nodePort = Integer.parseInt(txtPort.getText());
            String name = txtObjName.getText();
            String host = txtAddress.getText().trim();

            //start internal server
            LocateRegistry.createRegistry(nodePort);
            String nodeAddress = String.format("//%s:%d/%s", host, nodePort, name);
            System.out.println(nodeAddress);
            remoteObject = new OremoteP2P(nodeAddress, this);
            Naming.rebind(nodeAddress, remoteObject);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_btnStartNodeActionPerformed

    private void btnConnectToPeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectToPeerActionPerformed
        btnConnectToPeer.setEnabled(false);
        pgrbarPeer.setVisible(true);
        new Thread(() -> {
            try {
                //get peer
                String address = txtPeerAddress.getText();
                IremoteP2P peer = (IremoteP2P) RMI.getRemote(address);
                //add to network
                remoteObject.addNode(peer);
            } catch (Exception ex) {
                onException(ex, "connecting");
            }
            SwingUtilities.invokeLater(() -> {
                btnConnectToPeer.setEnabled(true);
                pgrbarPeer.setVisible(false);
            });
        }).start();

    }//GEN-LAST:event_btnConnectToPeerActionPerformed

    private void jlstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstUsersValueChanged
        if (!evt.getValueIsAdjusting()) { // check if the selection is over (was printing twice) 
            String user = jlstUsers.getSelectedValue();
            try {
                txtUsername.setText(user);
                String folderName = "users/" + user;
                Path folderPath = Paths.get(folderName);
                byte[] userProps = Files.readAllBytes(folderPath.resolve(user + ".props"));
                try (ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(userProps))) {
                    HashMap<String, String> props = (HashMap<String, String>) objectInputStream.readObject();
                    txtIsOrg.setText(props.get("isRegistrant").toUpperCase());
                }
            } catch (Exception ex) {
                txtInternalLog.append("Error loading " + user + "'s information\n");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jlstUsersValueChanged

    private void jlstTransactionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstTransactionsValueChanged
        if (!evt.getValueIsAdjusting()) {
            try {
                //check if the selection is over (was printing twice)
                String transaction = jlstTransactions.getSelectedValue();
                //load curriculum from string
                Curriculum c = Curriculum.fromByteArr(Base64.getDecoder().decode(transaction));
                //display informattion
                txtRegistrantName.setText(c.getEntidade());
                txtOwnerName.setText(c.getName());
                txtDesc.setText(c.getDesc());
                txtRegistrantPub.setText(c.getPubKeyEnt());
                txtOwnerPub.setText(c.getPubKeyOwner());
                txtSigned.setText(c.IsValid() ? "Verified" : "Unverified");

            } catch (Exception ex) {
                txtInternalLog.append("Error loading transaction information\n");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jlstTransactionsValueChanged

    private void jlstLedgerValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstLedgerValueChanged
        if (!evt.getValueIsAdjusting()) {
            Block b = (Block) blockchain.getElementAt(jlstLedger.getSelectedIndex());
            HashMap<String, String> header = (HashMap<String, String>) b.getBlockHeader();
            txtCurrHash.setText(header.get("currentHash"));
            txtMktRoot.setText(header.get("mktRoot"));
            txtPrevHash.setText(header.get("prevHash"));
            txtNonce.setText(header.get("nonce"));
            DefaultListModel blockTrans = new DefaultListModel();
            blockTrans.addAll(b.getBlockTransactions());
            jlistBlockTransactions.setModel(blockTrans);
        }
    }//GEN-LAST:event_jlstLedgerValueChanged

    /**
     * Main function of the application. This will set the custom LaF, create
     * and display the form, centering it on the screen.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //Change LaF of application (Customized by FlatLaf library
        try {
            //set LaF MacOS Dark
            UIManager.setLookAndFeel(new FlatMacDarkLaf());
            //LaF customization
            UIManager.put("Button.arc", 20);
            UIManager.put("Component.arc", 20);
            UIManager.put("TextComponent.arc", 20);
            UIManager.put("Component.focusWidth", 1);
            UIManager.put("Component.arrowType", "chevron");
        } catch (Exception e) {
            e.printStackTrace();
        }

        //create and display form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //build and set frame visible
                NodeFrame loginFrame = new NodeFrame();
                loginFrame.setVisible(true);
                //center on screen
                loginFrame.setLocationRelativeTo(null);
            }
        });
    }
    // <editor-fold defaultstate="collapsed" desc="Variables declaration"> 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AboutFrame;
    private javax.swing.JButton btnConnectToPeer;
    private javax.swing.JButton btnStartNode;
    private javax.swing.JCheckBoxMenuItem chkboxColorMode;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> jlistBlockTransactions;
    private javax.swing.JList<String> jlstLedger;
    private javax.swing.JList<String> jlstTransactions;
    private javax.swing.JList<String> jlstUsers;
    private javax.swing.JLabel lblCurrHash;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblIsOrg;
    private javax.swing.JLabel lblMktRoot;
    private javax.swing.JLabel lblNonce;
    private javax.swing.JLabel lblOwnerName;
    private javax.swing.JLabel lblOwnerPub;
    private javax.swing.JLabel lblPrevHash;
    private javax.swing.JLabel lblRegistrantName;
    private javax.swing.JLabel lblRegistrantPub;
    private javax.swing.JLabel lblSigned;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JMenu mMain;
    private javax.swing.JMenuBar mbarX;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miAccColor;
    private javax.swing.JProgressBar pgrbarPeer;
    private javax.swing.JSplitPane pnlNetwork;
    private javax.swing.JSplitPane pnlNode;
    private javax.swing.JSplitPane pnlTransactions;
    private javax.swing.JSplitPane pnlUsers;
    private javax.swing.JSplitPane pnlUsers1;
    private javax.swing.JPopupMenu.Separator sp1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCurrHash;
    private javax.swing.JTextField txtDesc;
    private javax.swing.JTextArea txtInternalLog;
    private javax.swing.JTextField txtIsOrg;
    private javax.swing.JTextArea txtKnownNet;
    private javax.swing.JTextField txtMktRoot;
    private javax.swing.JTextField txtNonce;
    private javax.swing.JTextField txtObjName;
    private javax.swing.JTextField txtOwnerName;
    private javax.swing.JTextField txtOwnerPub;
    private javax.swing.JTextField txtPeerAddress;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtPrevHash;
    private javax.swing.JTextField txtRegistrantName;
    private javax.swing.JTextField txtRegistrantPub;
    private javax.swing.JTextField txtSigned;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    // </editor-fold> 

    /**
     * Method for reporting exceptions.
     * 
     * @param ex Exception that occurred.
     * @param message note about event.
     */
    @Override
    public void onException(Exception ex, String message) {
        System.out.println(message);
        ex.printStackTrace();
    }

    /**
     * Method for sending messages to the UI.
     * 
     * @param title title of the message
     * @param message message content.
     */
    @Override
    public void onMessage(String title, String message) {
        txtInternalLog.append(title + message + "\n");
    }

    /**
     * Method for reporting the start of the remote object.
     * 
     * @param message note about event.
     */
    @Override
    public void onStartRemote(String message) {
        //disable button
        btnStartNode.setEnabled(false);
        //set "running" animation (progressbar)
        circLoadingBar running = new circLoadingBar();
        jPanel5.add(running);
        this.repaint();
        //log start
        txtInternalLog.append(message);

    }

    /**
     * Method for reporting connection to another peer.
     * 
     * @param address address of the new peer.
     */
    @Override
    public void onConect(String address) {
        try {
            List<IremoteP2P> peers = remoteObject.getNetwork();
            String network = "";
            for (IremoteP2P peer : peers) {
                network += peer.getAdress() + "\n";
            }
            txtKnownNet.setText(network);
        } catch (RemoteException ex) {
            onException(ex, "on connect");
        }
    }

    /**
     * Method for reporting a new transaction.
     * 
     * @param transaction transaction added.
     */
    @Override
    public void onTransaction(String transaction) {
        txtInternalLog.append("New transaction recieved: " + transaction + "\n");
        transactions.addElement(transaction);
    }

    /**
     * Method for reporting the occurrence of a repeat transaction.
     * 
     * @param message note about event.
     */
    @Override
    public void onRepeatTransaction(String message) {
        txtInternalLog.append(message + "\n");
    }

    /**
     * Method for reporting the removal of transactions.
     * 
     * @param c list of removed transactions.
     */
    @Override
    public void onRemoveTransactions(List c) {
        txtInternalLog.append("Removing " + c.size() + " transactions\n");
        for (Object object : c) {
            transactions.removeElement(object);
        }
    }

    /**
     * Method for reporting the sync of transactions between peers.
     * 
     * @param c 
     */
    @Override
    public void onSyncTransactions(List c) {
        transactions.clear();
        transactions.addAll(c);
    }

    /**
     * Method for reporting the start if mining operation
     * 
     * @param message message associated with event.
     * @param zeros zeros used in the operation.
     */
    @Override
    public void onStartMining(String message, int zeros) {
        txtInternalLog.append("Starting " + message + " " + zeros + "\n");
    }

    /**
     * Method for reporting the stop of the mining operation.
     * 
     * @param message message associated with event.
     * @param nonce zeros used in the operation.
     */
    @Override
    public void onStopMining(String message, int nonce) {
        txtInternalLog.append("Stopping " + message + " " + nonce + "\n");
    }

    /**
     * Method for reporting the find of a nonce.
     * 
     * @param message message associated with event.
     * @param nonce nonce that was found.
     */
    @Override
    public void onNonceFound(String message, int nonce) {
        txtInternalLog.append(message + "\t" + nonce + "\n");
    }

    /**
     * Method for reporting a update in the Blockchain.
     * 
     * @param b updated Blockchain.
     */
    @Override
    public void onBlockchainUpdate(BlockChain b) {
        blockchain.clear();
        blockchain.addAll(b.getChain());
    }

    /**
     * Method for updating the user's list.
     * 
     * @param users list of users.
     */
    public void onUserListUpdate(Object[] users) {
        userList.clear();
        for (Object user : users) {
            userList.addElement((String) user);
        }
    }

}
